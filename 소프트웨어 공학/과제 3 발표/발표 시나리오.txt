안녕하십니까
소프트웨어 공학 발표를 맡게 된 14학번 김태환이라고 합니다.

=====================================================================================
이번 발표에서 다룰 내용은 저희가 만든 포트폴리오 매니저란 무엇인가?에 대해서 먼저 말씀드리고
기능, 품질, 인터페이스 요구사항을 차례로 설명 드린 다음
테스트 영상 후 Q&A를 받고 마치도록 하겠습니다.

=====================================================================================
우선 저희가 만든 포트폴리오 매니저에 대해 설명해드리도록 하겠습니다.
아마 이름만 들어도 감이 오실 텐데요.
사용자의 자격증, 이력사항 같은 정보를 포트폴리오 매니저에 입력 받고 나중에 입력한 정보를 그냥 확인하거나, 리포트를 통해 확인할 수 있게 만든 프로그램입니다.
개발은 C#을 사용해서 이루어졌고 협업은 bitbucket을 통해 이루어졌습니다.

=====================================================================================
명칭에 대한 설명없이 기능적 요구사항으로 넘어가면 헷갈리실 것 같아
UI를 보며 간단하게 명칭에 대해 설명 드리겠습니다.
일단 우측 상단에 보이는 카드는 입력할 데이터의 큰 틀을 의미합니다. 쉽게 입력 주제라고 생각하시면 될 것 같습니다.
그리고 중간에 선택된 카드 내부에 보이는 것이 실질적 데이터인 아이템입니다.
그 다음으로 보이는 ElementPanel은 카드들을 보여주는 패널입니다.
마지막으로 저 프로그램 WindowForm을 MainUIForm이라고 합니다.
물론 UI 쪽에선 보이지 않지만 전체를 총괄하는 Portfolio Manger 와 파일 저장 및 불러오기를 담당하는 File Manger, 실제 데이터 저장을 위한 DataSet도 존재하고있습니다.
그럼 간단한 용어 설명은 여기까지 하고 기능요구사항으로 넘어가도록 하겠습니다.

=====================================================================================
기능적 요구사항은 총 세가지 측면에서 볼 수 있는데요
파일관리 측면, UI 측면, 데이터 관리 측면입니다.
우선 파일 관리 측면에선 저장, 열기, 그리고 혹시 모를 일에 대비한 파일 자동 저장이 있습니다.

쏼라 쏼라

이렇게 총 10개의 기능으로 이뤄져 있습니다.

기능적 요구사항 시나리오와 시퀀스 다이어그램을 함께 설명하는 편이 디자인 이해가 잘 될것 같아서 기능적 요구사항과 디자인은 함께 설명하도록 하겠습니다.

=====================================================================================
파일 불러오기가 시퀀스 다이어그램 위에 있으니 파일 불러오기부터 설명드리겠습니다.

파일 불러오기의 선행조건은 불러오는 파일은 올바른 형식이어야한다.
그리고 후행조건은 PortfolioManager에 Local에 저장된 파일을 불러오는 것입니다.

시나리오는 다음과 같습니다.
블라 블라

다음은 파일 세이브를 설명해드리도록 하겠습니다.
우선 파일 세이프의 선행 조건은 사용자 입력데이터가 존재해야 한다는 것이고
후행 조건은 Local에 사용자 입력데이터가 저장되는 것입니다.

시나리오는 처음에 파일 경로를 받고 설정하는 것 까지는 똑같습니다.
이 후 포트폴리오 매니저에서 파일 매니저에 세이브를 요청합니다.
그럼 파일 매니저에서 관련된 데이터를 직렬화 한 후 설정된 경로에 저장합니다.

=====================================================================================
다음으로 소개해 드릴 것은 항목 생성입니다.

항목생성의 선행조건은 
카드의 경우 새로 만들기나 파일 불러오기가 실행된 것이고 
아이템의 경우 하나 이상의 카드가 선택 될 것입니다.
후행 조건은 둘다 마찬가지로 Portfolio Manager에 항목 생성이 정상적으로 처리되는 것 입니다.

카드 생성 시나리오는 다음과 같습니다.
 
아이템 생성 시나리오도 비슷한데요

=====================================================================================
다음으로 소개해 드릴 것은 항목 수정입니다.

항목 수정의 선행조건은 하나의 아이템이나 카드가 선택되는 것이고
후행 조건은 Portfolio Manager에 항목 수정이 정상적으로 처리되는 것 입니다.

시나리오는
항목생성과 거의 유사한데요.
처음에 User가 Card나 Item을 선택해야 한다는 것과 입력 받은 데이터로 새로운 항목을 만드는 것이 아니라 기존의 항목을 수정한다는 차이정도가 있습니다.
시간 관계상 넘어가도록 하겠습니다.

=====================================================================================
다음으로 소개해 드릴 것은 항목 삭제입니다.

항목 삭제의 선행조건은 하나의 아이템이나 카드가 선택되는 것이고
후행 조건은 Portfolio Manager에 항목 삭제가 정상적으로 처리되는 것 입니다.

항목 삭제도 앞의 시나리오들과 유사한데요.
수정과 User가 Card나 Item을 선택해야 한다는 것과 입력 폼 없이 삭제한다는 차이정도가 있습니다.
이것도 시간 관계상 넘어가도록 하겠습니다.

=====================================================================================
다음으로 소개해 드릴 것은 메모 작성입니다. 척 봐도 간단해 보이죠?

메모 작성의 선행조건은 하나의 아이템이나 카드가 선택되는 것이고
후행조건은 메모 데이터가 정상적으로 저장되는 것 입니다.

시나리오를 두개를 적었지만 둘다 메모작성의 시나리오라는 점 알아주시기 바랍니다.

일단 메모작성 시나리오부터 보도록 하겠습니다.
블라 블라
간단하죠?

메모삭제 시나리오는 더욱 간단합니다
블라블라

=====================================================================================
슬슬 기능적 요구사항의 끝이 보이네요
이번에는 Drag & Drop을 소개해드리도록 하겠습니다.

Drag & Drop의 선행조건은 하나의 카드가 선택되는 것이고
후행조건은 사용자가 Drop한 곳으로 카드 위치가 옮겨지는 것입니다.

Drag & Drop 시나리오는 다음과 같습니다.

=====================================================================================
드디어 마지막 기능 요구사항입니다.
리포트 생성의 선행조건은 하나 이상의 카드와 아이템이 선택되는 것이고
후행조건은 선택한 카드와 아이템을 이용하여 리포트를 생성하는 것 입니다.

리포트의 시나리오는 다음과 같습니다.

=====================================================================================
이번에 설명 드릴 것은 품질 요구사항입니다.
기능성, 효율성, 복구성 총 3가지 유형으로 되어있는데요.
먼저 기능성부터 설명드리도록하겠습니다.
블라 블라
옆에 캡쳐화면을 보시면 잘 되고 있는 것 같죠? ㅎ

=====================================================================================
두번째로 효율성입니다.
쏼라 쏼라

카드이름 14글자 카드 아이템 100글자 10개짜리 100개 저장에는 10 ~ 14ms
불러오기는 8 ~ 10 초 사이 정도 걸렸습니다.

=====================================================================================
마지막은 복구성입니다.
쏼라쏼라

=====================================================================================
인터페이스 요구사항은 다음과 같습니다.
너무 많은 정보가 보이면 오히려 잘 볼 수 없기 때문에 화면에 표시되는 카드의 항목 수는 총 5개로 제한하였습니다.
.Net Framework 4.6.2 이상 버전을 사용할 것이기 때문에 윈도우 7 이상에서만 작동 가능합니다.
빠른 저장을 위해 데이터를 직렬화하여 저장하기로 하였습니다.

=====================================================================================
이 테스트에서 확인 할 수 있는 것은 파일 불러오기, 아이템 추가, 아이템 수정, Drag & Drop, 카드 생성, 카드 삭제, 리포트 생성, 파일 저장, 파일 자동 저장입니다

=====================================================================================
보시면 시나리오 대로 정상 작동하는 것을 알 수 있습니다.
